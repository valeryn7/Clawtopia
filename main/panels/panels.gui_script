local function show_panel(self, panel_node_id)
	gui.set_enabled(gui.get_node(panel_node_id), true)
	gui.set_scale(gui.get_node(panel_node_id), vmath.vector3(1, 1, 1))
	msg.post("claw#claw", "disable_touch")

	gui.set_enabled(gui.get_node("panel_overlay"), true)
	gui.set_color(gui.get_node("panel_overlay"), vmath.vector4(1, 1, 1, 1)) -- Mostramos textura completa
	self.panel_overlay_angle = 0  -- Reiniciar rotación

	msg.post("buttons#hud_gui", "show_pause_panel")
	self.panel_active = true
end

local function hide_panel(self, panel_node_id)
	msg.post("claw#claw", "enable_touch")
	gui.set_enabled(gui.get_node(panel_node_id), false)
	gui.set_scale(gui.get_node(panel_node_id), vmath.vector3(0.001, 0.001, 1))
end

local function hide_all_panels(self)
	hide_panel(self, "victory_gui")
	hide_panel(self, "defeat_gui")
	hide_panel(self, "pause_gui")
	gui.set_enabled(gui.get_node("panel_overlay"), false)
	msg.post("buttons#hud_gui", "hide_pause_panel")
	self.panel_active = false
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.panel_active = false
	self.panel_overlay_angle = 0
	self.current_level = 1
	hide_all_panels(self)
end

function update(self, dt)
	if gui.is_enabled(gui.get_node("panel_overlay")) then
		-- Oscilación entre -20° y +20°
		local angle_range = math.rad(5
	)
		local speed = 2  -- velocidad de oscilación
		self.panel_overlay_angle = angle_range * math.sin(socket.gettime() * speed)
		gui.set_rotation(gui.get_node("panel_overlay"), vmath.quat_rotation_z(self.panel_overlay_angle))
	end
end


function on_message(self, message_id, message, sender)
	if message_id == hash("level_completed") then
		print("✅ ¡VICTORIA!")
		msg.post("claw#claw", "disable_touch")
		self.current_level = message.level or self.current_level

		gui.set_text(gui.get_node("victory_points_label"), tostring(message.points))
		gui.set_text(gui.get_node("victory_level_label"), "LEVEL " .. tostring(self.current_level))
		show_panel(self, "victory_gui")

	elseif message_id == hash("level_failed") then
		print("❌ DERROTA")
		msg.post("claw#claw", "disable_touch")
		self.current_level = message.level or self.current_level

		gui.set_text(gui.get_node("defeat_points_label"), tostring(message.points))
		gui.set_text(gui.get_node("defeat_level_label"), "LEVEL " .. tostring(self.current_level))
		show_panel(self, "defeat_gui")

	elseif message_id == hash("show_pause_panel") then
		print("⏸️ Mostrar panel de pausa")
		msg.post("claw#claw", "disable_touch")
		show_panel(self, "pause_gui")

	elseif message_id == hash("hide_panels") then
		hide_all_panels(self)

	elseif message_id == hash("set_level") then
		self.current_level = message.level or 1
		gui.set_text(gui.get_node("victory_level_label"), "LEVEL " .. tostring(self.current_level))

	elseif message_id == hash("show_levels_panel") then
		print("📋 Mostrar selector de niveles")
		msg.post("levels#levels_gui", "show_levels_panel")
		hide_all_panels(self)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.released and self.panel_active then
		local x, y = action.x, action.y

		-- Pausa
		if gui.is_enabled(gui.get_node("pause_gui")) then
			if gui.pick_node(gui.get_node("pause_resume_button"), x, y) then
				print("▶️ Reanudar juego")
				hide_all_panels(self)
				msg.post("claw#claw", "enable_touch")
			elseif gui.pick_node(gui.get_node("pause_reset_button"), x, y) then
				print("🔁 Reiniciar nivel desde pausa")
				msg.post("loader_level#loader", "restart_level")
			elseif gui.pick_node(gui.get_node("pause_levels_button"), x, y) then
				print("📋 Ir al selector de niveles desde pausa")
				msg.post("loader_level#loader", "go_to_level_selector")
			end
			return true
		end

		-- Victory panel
		if gui.pick_node(gui.get_node("victory_next_button"), x, y) then
			print("▶️ Siguiente nivel")
			msg.post("loader_level#loader", "load_next_level")

		elseif gui.pick_node(gui.get_node("victory_restart_button"), x, y) then
			print("🔁 Reiniciar nivel (victoria)")
			msg.post("loader_level#loader", "restart_level")

			-- Defeat panel
		elseif gui.pick_node(gui.get_node("defeat_restart_button"), x, y) then
			print("🔁 Reiniciar nivel (derrota)")
			msg.post("loader_level#loader", "restart_level")

		elseif gui.pick_node(gui.get_node("defeat_home_button"), x, y) then
			print("🏠 Volver al selector de niveles")
			msg.post("loader_level#loader", "go_to_level_selector")
		end
	end
end

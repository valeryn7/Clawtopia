-- ==== Poki helpers (GUI) ====
local function poki_supported()
	return (poki_sdk ~= nil) and (type(poki_sdk.gameplay_start) == "function")
end

local function mute_all()
	if sound and sound.set_group_gain then pcall(sound.set_group_gain, "master", 0) end
end
local function unmute_all()
	if sound and sound.set_group_gain then pcall(sound.set_group_gain, "master", 1) end
end

local function poki_gameplay_start()
	if poki_supported() then pcall(poki_sdk.gameplay_start) end
end
local function poki_gameplay_stop()
	if poki_supported() then pcall(poki_sdk.gameplay_stop) end
end

local function poki_commercial_break(after_cb)
	if not poki_supported() then
		if after_cb then after_cb() end
		return
	end
	mute_all()
	pcall(poki_sdk.commercial_break, function()
		unmute_all()
		if after_cb then after_cb() end
	end)
end

-- (Opcional) Revive / doble recompensa
local function poki_rewarded_break(on_result)
	if not poki_supported() then
		if on_result then on_result(false) end
		return
	end
	mute_all()
	pcall(poki_sdk.rewarded_break, function(with_reward)
		unmute_all()
		if on_result then on_result(with_reward and true or false) end
	end)
end
-- ==== /Poki helpers ====

local function show_panel(self, panel_node_id)
	gui.set_enabled(gui.get_node(panel_node_id), true)
	gui.set_scale(gui.get_node(panel_node_id), vmath.vector3(1, 1, 1))
	msg.post("grid_controller#grid", "disable_touch")

	gui.set_enabled(gui.get_node("panel_overlay"), true)
	gui.set_color(gui.get_node("panel_overlay"), vmath.vector4(1, 1, 1, 1)) -- Mostramos textura completa
	self.panel_overlay_angle = 0  -- Reiniciar rotaci√≥n

	msg.post("buttons#hud_gui", "hide_pause_panel")
	self.panel_active = true

	poki_gameplay_stop()
end

local function hide_panel(self, panel_node_id)
	msg.post("grid_controller#grid", "enable_touch")
	gui.set_enabled(gui.get_node(panel_node_id), false)
	gui.set_scale(gui.get_node(panel_node_id), vmath.vector3(0.001, 0.001, 1))
	msg.post("/powerups#powerups_hud", "disable")
end

local function hide_all_panels(self)
	hide_panel(self, "victory_gui")
	hide_panel(self, "defeat_gui")
	hide_panel(self, "pause_gui")
	gui.set_enabled(gui.get_node("panel_overlay"), false)
	self.panel_active = false

	msg.post("/powerups#powerups_hud", "disable")

	poki_gameplay_start()
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.panel_active = false
	self.panel_overlay_angle = 0
	self.current_level = 1
	hide_all_panels(self)
end

function update(self, dt)
	if gui.is_enabled(gui.get_node("panel_overlay")) then
		-- Oscilaci√≥n entre -20¬∞ y +20¬∞
		local angle_range = math.rad(5
	)
		local speed = 2  -- velocidad de oscilaci√≥n
		self.panel_overlay_angle = angle_range * math.sin(socket.gettime() * speed)
		gui.set_rotation(gui.get_node("panel_overlay"), vmath.quat_rotation_z(self.panel_overlay_angle))
	end
end


function on_message(self, message_id, message, sender)
	if message_id == hash("level_completed") then
		print("‚úÖ ¬°VICTORIA!")
		msg.post("audio_manager#script", "play_sfx", { sound = hash("sfx_panel_victory") })
		msg.post("grid_controller#grid", "disable_touch")
		self.current_level = message.level or self.current_level
		
		local correct = message.correct_count or 0
		local incorrect = message.incorrect_count or 0
		--local total = correct * 100 - incorrect * 50
		local total = correct * 100

		gui.set_text(gui.get_node("points_positive"), "x" .. tostring(correct))
		gui.set_text(gui.get_node("points_negative"), "x" .. tostring(incorrect))
		
		gui.set_text(gui.get_node("victory_points_label"), tostring(total))
		gui.set_text(gui.get_node("victory_level_label"), "LEVEL " .. tostring(self.current_level))

		gui.set_enabled(gui.get_node("victory_points_positive"), true)
		gui.set_enabled(gui.get_node("victory_points_negative"), true)

		show_panel(self, "victory_gui")

	elseif message_id == hash("level_failed") then
		print("‚ùå DERROTA")
		msg.post("audio_manager#script", "play_sfx", { sound = hash("sfx_panel_defeat") })
		msg.post("grid_controller#grid", "disable_touch")
		self.current_level = message.level or self.current_level

		gui.set_text(gui.get_node("defeat_points_label"), tostring(message.points))
		gui.set_text(gui.get_node("defeat_level_label"), "LEVEL " .. tostring(self.current_level))
		show_panel(self, "defeat_gui")

	elseif message_id == hash("show_pause_panel") then
		print("‚è∏Ô∏è Mostrar panel de pausa")
		msg.post("grid_controller#grid", "disable_touch")
		show_panel(self, "pause_gui")

	elseif message_id == hash("hide_panels") then
		hide_all_panels(self)

	elseif message_id == hash("set_level") then
		self.current_level = message.level or 1
		gui.set_text(gui.get_node("victory_level_label"), "LEVEL " .. tostring(self.current_level))

	elseif message_id == hash("show_levels_panel") then
		print("üìã Mostrar selector de niveles")
		msg.post("levels#levels_gui", "show_levels_panel")
		hide_all_panels(self)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.released and self.panel_active then
		local x, y = action.x, action.y

		-- Pausa
		if gui.is_enabled(gui.get_node("pause_gui")) then
			if gui.pick_node(gui.get_node("pause_resume_button"), x, y) then
				print("‚ñ∂Ô∏è Reanudar juego")
				msg.post("audio_manager#script", "play_sfx", { sound = hash("sfx_click") })
				hide_all_panels(self)
				msg.post("grid_controller#grid", "enable_touch")
				msg.post("buttons#hud_gui", "show_pause_panel")
			elseif gui.pick_node(gui.get_node("pause_reset_button"), x, y) then
				print("üîÅ Reiniciar nivel desde pausa")
				msg.post("audio_manager#script", "play_sfx", { sound = hash("sfx_click") })
				-- msg.post("loader_level#loader", "restart_level")
				poki_commercial_break(function()
					hide_all_panels(self)
					msg.post("loader_level#loader", "restart_level")
				end)
			elseif gui.pick_node(gui.get_node("pause_levels_button"), x, y) then
				print("üìã Ir al selector de niveles desde pausa")
				msg.post("audio_manager#script", "play_sfx", { sound = hash("sfx_click") })
				-- msg.post("loader_level#loader", "go_to_level_selector")
				poki_commercial_break(function()
					hide_all_panels(self)
					msg.post("loader_level#loader", "go_to_level_selector")
				end)
			end
			return true
		end

		-- Victory panel
		if gui.pick_node(gui.get_node("victory_next_button"), x, y) then
			print("‚ñ∂Ô∏è Siguiente nivel")
			msg.post("audio_manager#script", "play_sfx", { sound = hash("sfx_click") })
			-- msg.post("loader_level#loader", "load_next_level")
			poki_commercial_break(function()
				hide_all_panels(self)
				msg.post("loader_level#loader", "load_next_level")
			end)

		elseif gui.pick_node(gui.get_node("victory_restart_button"), x, y) then
			print("üîÅ Reiniciar nivel (victoria)")
			msg.post("audio_manager#script", "play_sfx", { sound = hash("sfx_click") })
			-- msg.post("loader_level#loader", "restart_level")
			poki_commercial_break(function()
				hide_all_panels(self)
				msg.post("loader_level#loader", "restart_level")
			end)

			-- Defeat panel
		elseif gui.pick_node(gui.get_node("defeat_restart_button"), x, y) then
			print("üîÅ Reiniciar nivel (derrota)")
			msg.post("audio_manager#script", "play_sfx", { sound = hash("sfx_click") })
			-- msg.post("loader_level#loader", "restart_level")
			poki_commercial_break(function()
				hide_all_panels(self)
				msg.post("loader_level#loader", "restart_level")
			end)

		elseif gui.pick_node(gui.get_node("defeat_home_button"), x, y) then
			print("üè† Volver al selector de niveles")
			msg.post("audio_manager#script", "play_sfx", { sound = hash("sfx_click") })
			-- msg.post("loader_level#loader", "go_to_level_selector")
			poki_commercial_break(function()
				hide_all_panels(self)
				msg.post("loader_level#loader", "go_to_level_selector")
			end)
		end
	end
end

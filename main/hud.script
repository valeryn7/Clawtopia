-- hud.script actualizado (base para control de objetivos y paneles)

local function update_slot(self, slot)
	local label_url = msg.url(nil, slot.go, slot.label)
	local sprite_url = msg.url(nil, slot.go, slot.icon)

	if slot.type then
		msg.post(sprite_url, "play_animation", { id = hash(slot.type) })
	end

	msg.post(label_url, "set_text", {
		text = string.format("%d/%d", slot.collected, slot.required)
	})
end

local function show_panel(self, panel_name)
	local panel_url = msg.url(nil, panel_name, nil)
	msg.post(panel_url, "enable")
	go.set_scale(vmath.vector3(1, 1, 1), panel_url)
	print(panel_name)

	if panel_name == "victory_panel" or panel_name == "defeat_panel" then
		msg.post("charge_bar", "disable")
	end

	local overlay_sprite = msg.url(nil, "panel_overlay", "sprite")
	sprite.set_constant(overlay_sprite, "tint", vmath.vector4(0, 0, 0, 0.6))
	self.panel_active = true
end

local function hide_panel(self, panel_name)
	local panel_url = msg.url(nil, panel_name, nil)
	go.set_scale(vmath.vector3(0.001, 0.001, 1), panel_url)
end

function init(self)
	self.panel_active = false
	msg.post(".", "acquire_input_focus")

	self.slots = {
		{ go = "slot_1", icon = "slot_1_icon", label = "slot_1_label", type = nil, required = 0, collected = 0 },
		{ go = "slot_2", icon = "slot_2_icon", label = "slot_2_label", type = nil, required = 0, collected = 0 },
		{ go = "slot_3", icon = "slot_3_icon", label = "slot_3_label", type = nil, required = 0, collected = 0 },
		{ go = "slot_4", icon = "slot_4_icon", label = "slot_4_label", type = nil, required = 0, collected = 0 },
		{ go = "slot_5", icon = "slot_5_icon", label = "slot_5_label", type = nil, required = 0, collected = 0 },
	}

	hide_panel(self, "victory_panel")
	msg.post("victory_panel#victory_gui", "disable")
	hide_panel(self, "defeat_panel")
	hide_panel(self, "panel_overlay")

	for _, slot in ipairs(self.slots) do
		update_slot(self, slot)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("init_goals") then
		for i, slot in ipairs(self.slots) do
			local g = message.goals[i]
			if g then
				slot.type = g.type
				slot.required = g.required
				slot.collected = g.collected
				go.set_scale(vmath.vector3(1, 1, 1), msg.url(nil, slot.go, slot.icon))
				update_slot(self, slot)
			else
				slot.type = nil
				slot.required = 0
				slot.collected = 0
				go.set_scale(vmath.vector3(0.01, 0.01, 1), msg.url(nil, slot.go, slot.icon))
				msg.post(msg.url(nil, slot.go, slot.label), "set_text", { text = "" })
			end
		end

	elseif message_id == hash("update_goal") then
		for _, slot in ipairs(self.slots) do
			if slot.type == message.type then
				slot.collected = math.min(message.collected, slot.required)
				update_slot(self, slot)
				break
			end
		end

	elseif message_id == hash("level_completed") then
		print("✅ ¡VICTORIA!")
		msg.post("victory_panel#victory_gui", "enable")
		msg.post("victory_panel#victory_gui", "set_points", { points = message.points })
		show_panel(self, "victory_panel")

	elseif message_id == hash("level_failed") then
		show_panel(self, "defeat_panel")
		hide_panel(self, "victory_panel")
	end
end

local CELL_SIZE = 100
local GRID_COLS = 5
local GRID_ROWS = 6

local ZOOM_DURATION = 2.0  -- segundos
local ZOOM_LEVEL = 2.0

local MAX_TARGETS = 1

go.property("level", 1)

local SAVE_FILE = "clawtopia_data"

local POINTS = {
	bear_golden = 30,
	bear_blue = 15,
	bear_pink = 15,
	candy = 10,
	ball = 5,
	flip_flop = 5,
	box = 25,
	bomb = 0,
	bug = 0,
	rabbit = 30,
	fox = 35,
	frog = 40,
	bear_panda = 50
}

-- Rango de ángulos en grados (relativo al frente de la garra) → qué celdas revisar
local ANGLE_CELLS_VERTICAL = {
	{ min = -45, max = -36, col = 0 },
	{ min = -36, max = -27, col = 0 },
	{ min = -27, max = -18, col = 1 },
	{ min = -18, max =  -9, col = 1 },
	{ min =  -9, max =   9, col = 2 },
	{ min =   9, max =  18, col = 3 },
	{ min =  18, max =  27, col = 3 },
	{ min =  27, max =  36, col = 4 },
	{ min =  36, max =  45, col = 4 }
}

local LEVELS = require("main.levels.levels")

local function explode_adjacent_cells(self, row, col)
	local directions = {
		{ d_row = -1, d_col = 0 }, { d_row = 1, d_col = 0 },
		{ d_row = 0, d_col = -1 }, { d_row = 0, d_col = 1 }
	}
	for _, dir in ipairs(directions) do
		local r, c = row + dir.d_row, col + dir.d_col
		if r >= 0 and r < GRID_ROWS and c >= 0 and c < GRID_COLS then
			local neighbor = self.grid[r][c]
			if neighbor and not neighbor.captured then
				msg.post(neighbor.id, "explode")
				neighbor.captured = true
			end
		end
	end
end

local function has_seen_tutorial()
	-- local data = sys.load(SAVE_FILE)
	-- return data.tutorial_shown == true
	return false
end

local function mark_tutorial_as_seen()
	sys.save(SAVE_FILE, { tutorial_shown = true })
end

local function apply_level_movements(self)
	local movements = LEVELS[self.level].movements or {}
	for _, move in ipairs(movements) do
		local r, c = move.from_row - 1, move.from_col - 1
		local cell = self.grid[r] and self.grid[r][c]
		if cell and cell.id then
			msg.post(cell.id, "start_movement_loop", {
				x = move.to_x,
				y = move.to_y,
				loop = move.loop,
				wait = move.wait or 1.0,
				speed = move.speed or 0.5
			})
		end
	end
end

local function check_impossible_goals(self)
	local remaining = {}
	local total_required_remaining = 0
	local locked_objectives = {}
	local has_pending_key = false
	local key_drops_needed = 0

	-- Recorremos la grilla
	for row = 0, GRID_ROWS - 1 do
		for col = 0, GRID_COLS - 1 do
			local cell = self.grid[row][col]
			if cell and not cell.captured then
				local t = cell.sprite

				-- Detectar llaves no capturadas
				if t:sub(1, 4) == "key_" then
					has_pending_key = true
					key_drops_needed = key_drops_needed + 1
				end

				-- Si está bloqueado y no tengo la llave, lo marco como "posible pero inaccesible"
				if cell.locked then
					local color = cell.lock_color
					if not self.collected_keys[color] then
						table.insert(locked_objectives, t)
						t = nil
					end
				end

				if t and POINTS[t] and POINTS[t] > 0 then
					remaining[t] = (remaining[t] or 0) + 1
				end
			end
		end
	end

	-- Evaluar si hay suficientes objetos para cumplir los objetivos
	for _, goal in ipairs(self.goals) do
		local faltan = goal.required - goal.collected
		total_required_remaining = total_required_remaining + math.max(faltan, 0)

		-- Verificar si sumando bloqueados podría alcanzarse
		local locked_count = 0
		for _, ltype in ipairs(locked_objectives) do
			if ltype == goal.type then
				locked_count = locked_count + 1
			end
		end

		local total_posibles = (remaining[goal.type] or 0) + locked_count
		if total_posibles < faltan and not has_pending_key then
			return true -- No hay forma de completar el objetivo
		end
	end

	-- Calcular drops que se pueden usar realmente para cumplir objetivos
	local usable_drops = self.remaining_drops - key_drops_needed

	if usable_drops < total_required_remaining then
		return true -- No alcanza con los drops útiles
	end

	return false
end

local function generate_goals_from_level(self)
	local data = LEVELS[self.level]
	self.goals = {}
	for _, g in ipairs(data.goals) do
		table.insert(self.goals, {
			type = g.type,
			required = g.required,
			collected = 0,
			points_total = g.required * POINTS[g.type]
		})
	end
	print(" self.goals ",  self.goals )
	msg.post("hud", "init_goals", { goals = self.goals })
end

local function get_magnet_targets(self, angle)
	print("angle", angle)
	local angle_deg = math.deg(angle)
	local found_col = nil

	-- Buscar la columna asociada al ángulo
	for _, range in ipairs(ANGLE_CELLS_VERTICAL) do
		if angle_deg >= range.min and angle_deg <= range.max then
			found_col = range.col
			break
		end
	end

	local targets = {}

	if found_col then
		for row = 0, GRID_ROWS - 1 do
			local cell = self.grid[row] and self.grid[row][found_col]
			if cell and not cell.captured and not cell.locked then
				local valid = false

				-- Es un objetivo válido
				for _, goal in ipairs(self.goals or {}) do
					if cell.sprite == goal.type and goal.collected < goal.required then
						valid = true
						break
					end
				end

				-- Es una llave aún no recolectada
				if not valid and cell.sprite:match("^key_") then
					local color = cell.sprite:match("^key_(.+)$")
					if color and not self.collected_keys[color] then
						valid = true
					end
				end

				if valid and go.exists(cell.id) then
					table.insert(targets, {
						id = cell.id,
						sprite = cell.sprite,
						position = go.get_position(cell.id)
					})
					break -- ⛔ Rompe el bucle, ya encontramos el más arriba
				end
				
			end
		end
	end

	return targets
end


local function reset_grid(self)
	if self.creating_grid then
		print("⏳ Ya se está creando la grilla, ignorando este llamado")
		return
	end
	self.creating_grid = true

	self.correct_collected = 0
	self.incorrect_collected = 0
	self.total_points = 0

	-- Eliminar celdas existentes
	for row = 0, GRID_ROWS - 1 do
		for col = 0, GRID_COLS - 1 do
			local cell = self.grid[row] and self.grid[row][col]
			if cell and cell.id and go.exists(cell.id) then
				msg.post(cell.id, "stop_particles")
				go.delete(cell.id)
			end
		end
	end

	self.grid = {}
	self.total_cells = 0

	timer.delay(0.05, false, function()
		local level_data = LEVELS[self.level]
		local layout = level_data and level_data.grid or {}
		local locked_cells = level_data.locked_cells or {}

		local start_x = -((GRID_COLS - 1) * CELL_SIZE) / 2
		local total_grid_height = CELL_SIZE * GRID_ROWS
		local start_y = (1280 / 2) - ((1280 - total_grid_height) / 2) - 100

		self.remaining_drops = level_data.max_drops or 5
		msg.post("drops#drops", "set_drops", { drops = self.remaining_drops })

		for row = 0, GRID_ROWS - 1 do
			self.grid[row] = {}
			for col = 0, GRID_COLS - 1 do
				local x = start_x + col * CELL_SIZE
				local y = start_y - row * CELL_SIZE
				local sprite_name = layout[row + 1] and layout[row + 1][col + 1]

				if sprite_name and sprite_name ~= "" then
					local id = factory.create("#cell_factory", vmath.vector3(x, y, 1))
					if id then
						-- Detectar si la celda está bloqueada por candado
						local locked = false
						local lock_color = nil
						for _, lock in ipairs(locked_cells) do
							if lock.row == row + 1 and lock.col == col + 1 then
								locked = true
								lock_color = lock.color
								break
							end
						end

						-- Guardar en la grilla
						self.grid[row][col] = {
							id = id,
							sprite = sprite_name,
							revealed = true,
							captured = false,
							locked = locked,
							lock_color = lock_color,
							x = x,
							y = y
						}
						self.total_cells = self.total_cells + 1

						-- Setear sprite y candado
						msg.post(id, "set_revealed_sprite", { sprite = sprite_name, row = row, col = col })
						if locked then
							msg.post(id, "set_locked", { color = lock_color })
						end

						-- Animación de aparición
						go.set_scale(vmath.vector3(0.01, 0.01, 1), id)
						local delay = (row * GRID_COLS + col) * 0.02
						timer.delay(delay, false, function()
							msg.post(id, "reveal")
							go.animate(id, "scale", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(1, 1, 1), go.EASING_OUTBACK, 0.25)
						end)
					end
				end
			end
		end

		self.creating_grid = false
		apply_level_movements(self)
		if not self.showing_tutorial then
			msg.post("buttons#hud_gui", "show_pause_panel")
		end
		if (self.level >= 4) then
			msg.post("/powerups#powerups_hud", "enable")
		end
	end)
end

local function enableTouch(self)
	if (self.showing_tutorial == false) then
		msg.post("claw#claw", "enable_touch")
	end
end

local function disableTouch(self)
	msg.post("claw#claw", "disable_touch")
end

function init(self)
	self.grid = {}
	self.multiplier = 1
	self.total_points = 0
	self.game_over = false
	self.creating_grid = false
	self.collected_keys = {}

	self.follow_claw = false
	self.follow_timer = 0
	self.max_follow_time = 3
	self.zoom_set = false
	self.speed_multiplier = 1

	self.correct_collected = 0
	self.incorrect_collected = 0

	self.highlighted_cells = {}

	self.showing_tutorial = false
	self.level = 1

	if not has_seen_tutorial() then
		print("show tuto")
		self.showing_tutorial = true
		msg.post("tutorial_controller#tutorial", "show_tutorial")
		disableTouch(self)
	else
		enableTouch(self)
	end
	
end

local function check_game_end(self)
	if self.game_over then return end

	-- ✅ Verificar si se completaron todos los objetivos
	local completed = true
	for _, goal in ipairs(self.goals) do
		if goal.collected < goal.required then
			completed = false
			break
		end
	end

	if completed then
		msg.post("buttons#hud_gui", "hide_pause_panel")
		self.game_over = true
		self.total_points = 0
		for _, goal in ipairs(self.goals) do
			self.total_points = self.total_points + goal.points_total
		end
		print("🎉 VICTORIA: todos los objetivos cumplidos")

		disableTouch(self)

		-- 1️⃣ Mostrar primero la celebración visual
		timer.delay(0.6, false, function()
			local claw_pos = go.get_position("claw")

			-- 2️⃣ Reproducir efectos visuales
			msg.post("celebration_fx#celebrationScript", "play_celebration")

			msg.post("/powerups#powerups_hud", "disable")
			
			-- 3️⃣ Activar zoom y cámara lenta
			msg.post("@render:", "set_zoom", {
				zoom = ZOOM_LEVEL,
				pos = claw_pos
			})
			self.speed_multiplier = 0.3  -- cámara lenta
			msg.post("claw#claw", "set_speed_multiplier", { value = self.speed_multiplier })
			
			self.follow_claw = true
			self.follow_timer = 0

			timer.delay(ZOOM_DURATION, false, function()
				self.follow_claw = false
				self.speed_multiplier = 1  -- volver a velocidad normal
				msg.post("claw#claw", "set_speed_multiplier", { value = self.speed_multiplier })
				
				-- 6️⃣ Mostrar panel de victoria
				msg.post("panels#panels_gui", "level_completed", {
					points = self.total_points,
					level = self.level,
					correct_count = self.correct_collected,
					incorrect_count = self.incorrect_collected
				})

				-- 7️⃣ Zoom out después de un pequeño delay
				timer.delay(0.5, false, function()
					msg.post("@render:", "set_zoom", {
						zoom = 1.0,
						pos = vmath.vector3(0)
					})
				end)
			end)
		end)

		return
	end

	-- ❌ Verificar si ya es imposible completar los objetivos
	if check_impossible_goals(self) then
		self.game_over = true
		print("💥 DERROTA: objetivos imposibles de completar")
		msg.post("panels#panels_gui", "level_failed", {
			level = self.level,
			points = self.total_points
		})
		return
	end

	-- ❌ Verificar si se acabaron los drops sin cumplir objetivos
	if self.remaining_drops <= 0 then
		self.game_over = true
		print("💥 DERROTA: sin drops restantes")
		msg.post("panels#panels_gui", "level_failed", {
			level = self.level,
			points = self.total_points
		})
	end
end


function update(self, dt)
	dt = dt * self.speed_multiplier
	if self.follow_claw then
		self.follow_timer = self.follow_timer + dt
		local claw_pos = go.get_position("claw")
		msg.post("@render:", "set_zoom", {
			zoom = ZOOM_LEVEL,
			pos = claw_pos
		})

		if self.follow_timer >= self.max_follow_time then
			self.follow_claw = false
			self.zoom_set = false

			-- Volver al centro y zoom normal
			msg.post("@render:", "set_zoom", {
				zoom = 1.0,
				pos = vmath.vector3(0)
			})
		end
	end
	
end

function on_message(self, message_id, message, sender)
	if message_id == hash("tutorial_shown") then
		self.showing_tutorial = true
		print("show tuto")

	elseif message_id == hash("tutorial_hidden") then
		self.showing_tutorial = false
		mark_tutorial_as_seen()
		enableTouch(self)
		
	elseif message_id == hash("force_show_tutorial") then
		msg.post("tutorial_controller#tutorial", "show_tutorial")
		disableTouch(self)
		print("show tuto")
		
	elseif message_id == hash("enable_touch") then
		enableTouch(self)

	elseif message_id == hash("disable_touch") then
		disableTouch(self)
		
	elseif message_id == hash("grab_object_at_column") then
		local x, y = message.x, message.y
		local max_targets = message.max_targets or 1
		local margin_multiplier = self.magnet_grab_active and 1.5 or 1.0
		local MARGIN = CELL_SIZE * 0.5 * margin_multiplier
		local targets_found = 0

		for row = 0, GRID_ROWS - 1 do
			for col = 0, GRID_COLS - 1 do
				local cell = self.grid[row][col]
				if cell and not cell.captured then
					local pos = go.get_position(cell.id)
					local dx = math.abs(pos.x - x)
					local dy = math.abs(pos.y - y)

					if dx <= MARGIN and dy <= MARGIN then
						-- 🔓 Lógica de candado
						if cell.locked then
							local color = cell.lock_color
							if not color then
								print("⚠️ ERROR: Candado sin color")
								return
							end
							if not self.collected_keys[color] then
								msg.post("hud", "show_message", { text = "🔒 Necesitás la llave " .. color })
								return
							else
								cell.locked = false
								msg.post(cell.id, "unlock", {})
							end
						end

						-- 🗝️ Lógica de llaves
						if cell.sprite:sub(1, 4) == "key_" then
							local color = cell.sprite:match("^key_(.+)$")
							if not color then
								print("⚠️ ERROR: No se pudo extraer color")
								return
							end

							self.collected_keys[color] = true
							msg.post("hud", "show_message", { text = "🔓 ¡Llave " .. color .. " obtenida!" })

							timer.delay(0.01, false, function()
								for r = 0, GRID_ROWS - 1 do
									for c = 0, GRID_COLS - 1 do
										local target = self.grid[r][c]
										if target and target.locked and not target.captured and target.lock_color == color then
											target.locked = false
											msg.post(target.id, "unlock", {})
										end
									end
								end
							end)
						end
						
						if cell.locked then
							print("❌ BUG: Se intentó capturar una celda aún bloqueada")
							return
						end
						
						msg.post(cell.id, "capture")
						msg.post("claw", "object_grabbed", { object_sprite = cell.sprite ~= "bomb" and cell.sprite or nil })
						cell.captured = true

						if self.magnet_grab_active then
							msg.post("claw#claw", "disable_magnet_effect")
							msg.post(cell.id, "play_magnet_effect")
						end

						-- 🎯 Actualizar objetivos
						local was_correct = false
						for _, goal in ipairs(self.goals) do
							if goal.type == cell.sprite and goal.collected < goal.required then
								goal.collected = goal.collected + 1
								msg.post("hud", "update_goal", {
									type = goal.type,
									collected = goal.collected
								})
								was_correct = true
								break
							end
						end

						if was_correct then
							self.correct_collected = self.correct_collected + 1
						else
							self.incorrect_collected = self.incorrect_collected + 1
						end

						check_game_end(self)

						targets_found = targets_found + 1
						if targets_found >= max_targets then
							return
						end
					end
				end
			end
		end

		if self.magnet_grab_active then
			self.magnet_grab_active = false
			msg.post("claw#claw", "disable_magnet_effect")
		end
		
	elseif message_id == hash("consume_drop") then
		self.remaining_drops = self.remaining_drops - 1
		msg.post("drops#drops", "set_drops", { drops = self.remaining_drops })
		check_game_end(self)

	elseif message_id == hash("restart_level") then
		self.game_over = false
		self.total_points = 0
		self.has_key = false
		reset_grid(self)
		generate_goals_from_level(self)
		if (self.showing_tutorial == false) then
			enableTouch(self)
		end

	elseif message_id == hash("set_level") then
		self.level = message.level or 1
		self.has_key = false
		reset_grid(self)
		generate_goals_from_level(self)
		print("self.showing_tutorial", self.showing_tutorial)
		if (self.showing_tutorial == false) then
			enableTouch(self)
		end
		
	elseif message_id == hash("update_cell_position") then
		local cell = self.grid[message.row] and self.grid[message.row][message.col]
		if cell then
			cell.x = message.x
			cell.y = message.y
		end

	elseif message_id == hash("activate_powerup") then
		if message.type == "magnet_grab" then
			self.magnet_grab_active = true
			self.magnet_grab_level = message.level or 1
			msg.post("claw#claw", "enable_magnet_effect", { level = self.magnet_grab_level })
		end

	elseif message_id == hash("disable_magnet_effect") then
		if self.highlighted_cell and go.exists(self.highlighted_cell) then
			msg.post(self.highlighted_cell, "set_glow_visible", { visible = false })
		end
		self.highlighted_cell = nil
	
	elseif message_id == hash("update_magnet_highlight") then
		local targets = get_magnet_targets(self, message.angle)
		pprint(targets)
		print("🔍 Cantidad de targets seleccionados:", #targets)
		
		-- 🔄 Apagar todos los glows anteriores
		if self.highlighted_cells then
			for _, id in ipairs(self.highlighted_cells) do
				if go.exists(id) then
					msg.post(id, "set_glow_visible", { visible = false })
				end
			end
		end

		-- 🧼 Limpiar la tabla antes de llenarla de nuevo
		self.highlighted_cells = {}

		-- ✅ Encender el glow en todos los targets nuevos
		for _, target in ipairs(targets) do
			if go.exists(target.id) then
				msg.post(target.id, "set_glow_visible", { visible = true })
				table.insert(self.highlighted_cells, target.id)
			end
		end
		
		
	elseif message_id == hash("magnet_attract_bears") then
		local targets = get_magnet_targets(self, message.angle)
		print("🐻 Recibido magnet_attract_bears con targets:")
		print(targets)

		if #targets == 0 then
			print("⚠️ No se encontraron targets válidos para el imán.")

			-- 🚫 Cancelar el modo imán visualmente
			self.magnet_grab_active = false
			msg.post("claw#claw", "disable_magnet_effect")

			-- 🧲 Continuar con descenso como si fuera un intento normal
			msg.post("claw#claw", "fallback_grab")
			return
		end

		for _, target in ipairs(targets) do
			if go.exists(target.id) then
				msg.post(target.id, "set_glow_invisible")
				table.insert(self.highlighted_cells, target.id)
			end
		end

		local target = targets[1]
		for _, goal in ipairs(self.goals) do
			if goal.type == target.sprite and goal.collected < goal.required then
				goal.collected = goal.collected + 1
				msg.post("hud", "update_goal", {
					type = goal.type,
					collected = goal.collected
				})
				break
			end
		end

		msg.post("claw#claw", "magnet_targets", {
			targets = targets
		})

		check_game_end(self)
	end
	
end
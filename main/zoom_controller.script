local ZOOM_FACTOR = 1.3
local RETURN_DELAY = 1.2
local rendercam = require "rendercam.rendercam"

function on_message(self, message_id, message, sender)
	if message_id == hash("zoom_to_claw") and message.x and message.y then
		local target = vmath.vector3(message.x, message.y, 0)

		-- üí° Calcular compensaci√≥n para centrar el zoom en la garra
		local dx = (target.x) * (ZOOM_FACTOR - 1) / ZOOM_FACTOR
		local dy = (target.y) * (ZOOM_FACTOR - 1) / ZOOM_FACTOR
		local compensated = vmath.vector3(dx, dy, 0)

		print("üéØ Zoom centrado en:", target, "‚Üí Posici√≥n compensada:", compensated)

		-- üü° Mover la c√°mara
		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, compensated, go.EASING_OUTSINE, 0.3)

		-- üîç Hacer zoom visual (escala simulada)
		go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(ZOOM_FACTOR, ZOOM_FACTOR, 1), go.EASING_OUTSINE, 0.3)

		-- üîÅ Regresar a la vista normal despu√©s del delay
		timer.delay(RETURN_DELAY, false, function()
			go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(1.0, 1.0, 1.0), go.EASING_INSINE, 0.3)
			go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(0, 0, 0), go.EASING_INSINE, 0.3)

			-- üü¢ Volver a la c√°mara principal despu√©s del zoom
			timer.delay(0.4, false, function()
				rendercam.follow("camera_gameplay") -- Asegurate que este GO tenga ese id
			end)
		end)
	end
end
